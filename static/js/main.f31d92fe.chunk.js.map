{"version":3,"sources":["index.js"],"names":["Current","props","state","className","this","location","src","process","style","transform","wind_deg","transitionProperty","transitionDuration","Math","round","wind_speed","temp","React","Component","Card","onClick","data","i","allData","length","div","document","createElement","classList","add","headerDate","parseDate","dateAndTime","dateName","getDayName","getElementById","innerHTML","image","icon","time","parsedTime","slice","temp_max","windContainer","wind","windSpeed","cssText","appendChild","modalContent","modal","display","cardClicked","date","temp_high","temp_low","App","datesList","day1","day2","day3","day4","day5","day6","latitude","longitude","pvm","isLoaded","cityName","error","getMyLocation","bind","handleChange","handleSubmit","getData","getCurrentData","handleSuccess","handleError","position","setState","coords","link","currentLink","err","console","warn","code","message","PERMISSION_DENIED","log","alert","window","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","fetch","then","res","json","result","cod","number","main","rounded","currentLocation","name","currentTemp","currentSrc","weather","currentWind_deg","deg","currentWind_speed","speed","highest_temp","lowest_temp","day","list","prev_i","dt_txt","prev_date","temp_min","id","desc","description","push","replace","event","target","value","preventDefault","current","day1Date","day2Date","day3Date","day4Date","day5Date","day6Date","onSubmit","type","placeholder","onChange","dateString","month","locale","Date","toLocaleDateString","weekday","ReactDOM","render","card","getElementsByClassName","addEventListener","e","header","setAttribute","exitButton","spanClicked","onclick"],"mappings":"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","file":"static/js/main.f31d92fe.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\n// ===========CURRENT========CURRENT==============CURRENT===============CURRENT==============CURRENT=================CURRENT================CURRENT\nclass Current extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {}\n  render() {\n    return (\n      <div className=\"current\">\n        <div className=\"current-content\">\n          <h1 className=\"current-location\">{this.props.location}</h1>\n          <h2>Now</h2>\n          <img\n            className=\"current-img\"\n            src={process.env.PUBLIC_URL + \"/icons/\" + this.props.src + \".png\"}\n          />\n          <div className=\"wind-container\">\n            <img\n              className=\"wind\"\n              src={process.env.PUBLIC_URL + \"/icons/\" + \"wind.png\"}\n              style={{\n                transform: \"rotate(\" + this.props.wind_deg + \"deg)\",\n                transitionProperty: \"transform\",\n                transitionDuration: \"3s\",\n              }}\n            ></img>\n            <div className=\"wind-speed\">\n              {Math.round(this.props.wind_speed)}\n            </div>\n          </div>\n\n          <div className=\"current-temp\">\n            <p className=\"current-temp-high\">\n              {\n                this.props.temp >= 0\n                  ? \"+\" + this.props.temp + \"°\"\n                  : +\"\" + this.props.temp + \"°\" || 0 + \"°\"\n                /*If temperature is positive add '+' if its negative dont add anything,\n                                                         the number already has a negative '-' infront  */\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n//===============CARD==========CARD============CARD============CARD============CARD==========CARD========CARD\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <button\n        onClick={() => {\n          cardClicked(\n            this.props\n          ); /* When a card is clicked fire the cardClicked() function and pass all its properties to it */\n        }}\n        className=\"card\"\n      >\n        <p className=\"date\">{this.props.date}</p>\n        <img\n          className=\"icon-img\"\n          src={process.env.PUBLIC_URL + \"/icons/\" + this.props.src + \".png\"}\n        ></img>\n        <div className=\"wind-container\">\n          <img\n            className=\"wind\"\n            src={process.env.PUBLIC_URL + \"/icons/\" + \"wind.png\"}\n            style={{\n              transform: \"rotate(\" + this.props.wind_deg + \"deg)\",\n              transitionProperty: \"transform\",\n              transitionDuration: \"3s\",\n            }}\n          ></img>\n          <div className=\"wind-speed\">{this.props.wind_speed}</div>\n        </div>\n        <div className=\"temp\">\n          <p className=\"temp-high\">\n            {\n              this.props.temp_high >= 0\n                ? \"+\" + this.props.temp_high + \"°\"\n                : +this.props.temp_high + \"°\" || 0 + \"°\"\n              /*If temperature is positive add '+' if its negative dont add anything,\n                                                the number already has a negative '-' infront  */\n            }\n          </p>\n          <p className=\"temp-low\">\n            {\n              this.props.temp_low >= 0\n                ? \"+\" + this.props.temp_low + \"°\"\n                : +this.props.temp_low + \"°\" || 0 + \"°\"\n              /*If temperature is positive add '+' if its negative dont add anything,\n                                                the number already has a negative '-' infront  */\n            }\n          </p>\n        </div>\n      </button>\n    );\n  }\n}\n//============APP=============APP============APP============APP================APP============APP=============APP\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // set up the state object\n      datesList: {\n        day1: [{}],\n        day2: [{}],\n        day3: [{}],\n        day4: [{}],\n        day5: [{}],\n        day6: [{}],\n      },\n      latitude: null,\n      longitude: null,\n      pvm: \"\",\n      src: \"\",\n      isLoaded: false,\n      cityName: \"\",\n      error: null,\n    };\n    // Bind functions to this\n    this.getMyLocation = this.getMyLocation.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getData = this.getData.bind(this);\n    this.getCurrentData = this.getCurrentData.bind(this);\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  componentDidMount() {}\n\n  // Success callback of location.getCurrentPosition()\n  handleSuccess(position) {\n    this.setState({\n      //Set latitude and longitude to state\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n    });\n    let link = //coordinates link\n      \"https://api.openweathermap.org/data/2.5/forecast?lat=\" +\n      this.state.latitude +\n      \"&lon=\" +\n      this.state.longitude +\n      \"&appid=\" + process.env.REACT_APP_YOUR_API_KEY_NAME + \"&units=metric\";\n    let currentLink = //coordinates link for current weather\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n      this.state.latitude +\n      \"&lon=\" +\n      this.state.longitude +\n      \"&appid=\" + process.env.REACT_APP_YOUR_API_KEY_NAME + \"&units=metric\";\n    this.getData(link); //Get data with the created links\n    this.getCurrentData(currentLink);\n  }\n\n  //Error callback of location.getCurrentPosition()\n  handleError(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n    if (err.PERMISSION_DENIED) {\n      console.log(\"Error: permission denied\");\n      // Your custom modal here.\n      alert(\n        \"This app needs your permission to use your location.\" +\n          \"Click the 🔒 or ℹ in the left corner of the address bar and allow location services\"\n      );\n    } else {\n      console.log(\"error\" + err);\n    }\n  }\n\n  getMyLocation() {\n    //Set of options for getCurrentPosition()\n    var options = {\n      enableHighAccuracy: true, //On dekstop the coordinates are the same true or false..\n      timeout: 5000, //Amount of time before the error callback is invoked.\n      maximumAge: 0, //maximum cached position age.\n    };\n    const location = window.navigator && window.navigator.geolocation;\n    //Try to get the location, parameters: success callback, error callback, options\n    location.getCurrentPosition(this.handleSuccess, this.handleError, options);\n  }\n\n  //Get the current weather data from openweathermap API\n  getCurrentData(link) {\n    fetch(link)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          if (result.cod == 200) {\n            //if status code 200 (OK)\n            let number = result.main.temp;\n            let rounded = Math.round(number); //Round the temperature\n\n            this.setState({\n              // set variables to state\n              currentLocation: result.name,\n              currentTemp: rounded,\n              currentSrc: result.weather[0].icon,\n              currentWind_deg: result.wind.deg,\n              currentWind_speed: result.wind.speed,\n            });\n          } else {\n            // if the status code is something else than 200\n            alert(result.message); //alert the message openweathermap sends trough json\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: false,\n            error,\n          });\n        }\n      );\n  }\n\n  //Get the forecast data from openweathermap API\n  getData(link) {\n    fetch(link)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          let i; //declare variables and objects\n          let day = 1;\n          var datesList = {\n            day1: [{}],\n            day2: [{}],\n            day3: [{}],\n            day4: [{}],\n            day5: [{}],\n            day6: [{}],\n          };\n          var highest_temp;\n          var lowest_temp;\n\n          if (result.cod == 200) {\n            //if status code 200 (OK)\n            for (i = 0; i < result.list.length; i++) {\n              //  Loop through every list item in results\n              var copy_of_i = i; //  declare some variables\n              var prev_i = copy_of_i - 1;\n              var date = result.list[i].dt_txt; //  store date from current list item\n\n              if (i == 0) {\n                day = 1; //  first list item is day 1\n              } else if (i > 0) {\n                //  if list item is not first\n                var prev_date = result.list[prev_i].dt_txt; //  declare yesterday variable\n                if (date.slice(8, 10) == prev_date.slice(8, 10)) {\n                  //  compare current list items date to previous list items date\n                  day = day; //  if it's a match then its still the same day\n                } else {\n                  //  if not then the day has changed\n                  day = day + 1;\n                  highest_temp = null; // on day change discard highest and lowest temp\n                  lowest_temp = null;\n                }\n              }\n\n              if (highest_temp == null) {\n                // Get highest temp of the day\n                highest_temp = result.list[i].main.temp_max;\n                //if its the first forecast hour of the day then its the highest temp so far\n              }\n              if (result.list[i].main.temp_max > highest_temp) {\n                // if temp is higher than whats stored in highest temp, then its the new highest temp\n                highest_temp = result.list[i].main.temp_max;\n              }\n\n              if (lowest_temp == null) {\n                // Get lowest temp of the day\n                lowest_temp = result.list[i].main.temp_min;\n              }\n              if (result.list[i].main.temp_min < lowest_temp) {\n                //compare lowest temp and set new lowest temp if its lower\n                lowest_temp = result.list[i].main.temp_min;\n              }\n\n              var date = {\n                id: day, //  use the day variable as an id for date object\n                dateAndTime: result.list[i].dt_txt,\n                highest_temp: highest_temp,\n                lowest_temp: lowest_temp,\n                temp_max: result.list[i].main.temp_max,\n                temp_min: result.list[i].main.temp_min,\n                icon: result.list[i].weather[0].icon,\n                desc: result.list[i].weather[0].description,\n                wind_deg: result.list[i].wind.deg,\n                wind_speed: result.list[i].wind.speed,\n              };\n\n              if (day === 1) {\n                datesList.day1.push(date); //  add new date to copy of datelist\n              } else if (day === 2) {\n                datesList.day2.push(date);\n              } else if (day === 3) {\n                datesList.day3.push(date);\n              } else if (day === 4) {\n                datesList.day4.push(date);\n              } else if (day === 5) {\n                datesList.day5.push(date);\n              } else if (day === 6) {\n                datesList.day6.push(date);\n              }\n            }\n            this.setState({\n              datesList: datesList, //  update state dateslist\n            });\n            this.setState({\n              isLoaded: true, // data is now loaded\n            });\n            let div = document.getElementById(\"weatherWrapper\");\n            // set html visible now that data is loaded\n            div.classList.replace(\"hidden\", \"visible\");\n          } else {\n            // if result cod is something else than 200\n            alert(result.message); // alert the message thats in the returned json for example \"City not found\"\n            let div = document.getElementById(\"weatherWrapper\");\n            div.classList.replace(\"visible\", \"hidden\"); // hide the html\n            this.setState({\n              isLoaded: false,\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  handleChange(event) {\n    // get the cityname from input and setstate\n    this.setState({ cityName: event.target.value });\n    event.preventDefault();\n  }\n\n  handleSubmit(event) {\n    // form the api links and call the getdata methods\n    let link =\n      \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n      this.state.cityName +\n      \"&appid=\" + process.env.REACT_APP_YOUR_API_KEY_NAME + \"&units=metric&mode=json\";\n    let currentLink =\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n      this.state.cityName +\n      \"&appid=\" + process.env.REACT_APP_YOUR_API_KEY_NAME + \"&units=metric&mode=json\";\n    this.getData(link);\n    this.getCurrentData(currentLink);\n    event.preventDefault(); //prevent page reload\n  }\n\n  render() {\n    // declare variables\n    let isLoaded = this.state.isLoaded;\n    let day1, day2, day3, day4, day5, day6, current;\n    if (isLoaded) {\n      //if data has been loaded from the API\n      //parse the dates and store them in variables\n      let day1Date =\n        getDayName(\n          this.state.datesList.day1[this.state.datesList.day1.length - 1]\n            .dateAndTime,\n          \"en\",\n          \"EN\"\n        ) +\n        \" \" +\n        parseDate(\n          this.state.datesList.day1[this.state.datesList.day1.length - 1]\n            .dateAndTime\n        );\n      let day2Date =\n        getDayName(this.state.datesList.day2[5].dateAndTime, \"en\", \"EN\") +\n        \" \" +\n        parseDate(this.state.datesList.day2[5].dateAndTime);\n      let day3Date =\n        getDayName(this.state.datesList.day3[5].dateAndTime, \"en\", \"EN\") +\n        \" \" +\n        parseDate(this.state.datesList.day3[5].dateAndTime);\n      let day4Date =\n        getDayName(this.state.datesList.day4[5].dateAndTime, \"en\", \"EN\") +\n        \" \" +\n        parseDate(this.state.datesList.day4[5].dateAndTime);\n      let day5Date =\n        getDayName(this.state.datesList.day5[5].dateAndTime, \"en\", \"EN\") +\n        \" \" +\n        parseDate(this.state.datesList.day5[5].dateAndTime);\n      let day6Date =\n        getDayName(\n          this.state.datesList.day6[this.state.datesList.day6.length - 1]\n            .dateAndTime,\n          \"en\",\n          \"EN\"\n        ) +\n        \" \" +\n        parseDate(\n          this.state.datesList.day6[this.state.datesList.day6.length - 1]\n            .dateAndTime\n        );\n      // Build the cards and set the props that will be passed\n      current = (\n        <Current\n          src={this.state.currentSrc}\n          location={this.state.currentLocation}\n          wind_deg={this.state.currentWind_deg}\n          wind_speed={this.state.currentWind_speed}\n          temp={this.state.currentTemp}\n        />\n      );\n\n      day1 = (\n        <Card\n          src={this.state.datesList.day1[1].icon}\n          temp_high={Math.round(\n            this.state.datesList.day1[this.state.datesList.day1.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day1[this.state.datesList.day1.length - 1]\n              .lowest_temp\n          )}\n          date={day1Date}\n          wind_deg={this.state.datesList.day1[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day1[1].wind_speed)}\n          allData={this.state.datesList.day1}\n        />\n      );\n\n      day2 = (\n        <Card\n          src={this.state.datesList.day2[5].icon}\n          temp_high={Math.round(\n            this.state.datesList.day2[this.state.datesList.day2.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day2[this.state.datesList.day2.length - 1]\n              .lowest_temp\n          )}\n          date={day2Date}\n          wind_deg={this.state.datesList.day2[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day2[1].wind_speed)}\n          allData={this.state.datesList.day2}\n        />\n      );\n      day3 = (\n        <Card\n          src={this.state.datesList.day3[5].icon}\n          temp_high={Math.round(\n            this.state.datesList.day3[this.state.datesList.day3.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day3[this.state.datesList.day3.length - 1]\n              .lowest_temp\n          )}\n          date={day3Date}\n          wind_deg={this.state.datesList.day3[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day3[1].wind_speed)}\n          allData={this.state.datesList.day3}\n        />\n      );\n      day4 = (\n        <Card\n          src={this.state.datesList.day4[5].icon}\n          temp_high={Math.round(\n            this.state.datesList.day4[this.state.datesList.day4.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day4[this.state.datesList.day4.length - 1]\n              .lowest_temp\n          )}\n          date={day4Date}\n          wind_deg={this.state.datesList.day4[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day4[1].wind_speed)}\n          allData={this.state.datesList.day4}\n        />\n      );\n      day5 = (\n        <Card\n          src={this.state.datesList.day5[5].icon}\n          temp_high={Math.round(\n            this.state.datesList.day5[this.state.datesList.day5.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day5[this.state.datesList.day5.length - 1]\n              .lowest_temp\n          )}\n          date={day5Date}\n          wind_deg={this.state.datesList.day5[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day5[1].wind_speed)}\n          allData={this.state.datesList.day5}\n        />\n      );\n      day6 = (\n        <Card\n          src={\n            this.state.datesList.day6[this.state.datesList.day6.length - 1].icon\n          }\n          temp_high={Math.round(\n            this.state.datesList.day6[this.state.datesList.day6.length - 1]\n              .highest_temp\n          )}\n          temp_low={Math.round(\n            this.state.datesList.day6[this.state.datesList.day6.length - 1]\n              .lowest_temp\n          )}\n          date={day6Date}\n          wind_deg={this.state.datesList.day6[1].wind_deg}\n          wind_speed={Math.round(this.state.datesList.day6[1].wind_speed)}\n          allData={this.state.datesList.day6}\n        />\n      );\n    } else {\n      // if data is not loaded then cards have no data to be passed to\n      current = <Current />;\n      day1 = <Card />;\n      day2 = <Card />;\n      day3 = <Card />;\n      day4 = <Card />;\n      day5 = <Card />;\n      day6 = <Card />;\n    }\n    return (\n      <div className=\"main\">\n        <div className=\"formWrapper\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"inputWrapper\">\n              <input\n                id=\"cityInput\"\n                type=\"text\"\n                placeholder=\"City e.g. Seattle\"\n                value={this.state.cityName}\n                onChange={this.handleChange}\n              />\n              <input id=\"searchButton\" type=\"image\" src= {process.env.PUBLIC_URL + \"/icons/arrow.png\"} />\n            </div>\n          </form>\n          <button id=\"locationButton\" onClick={this.getMyLocation}>\n            <img src={process.env.PUBLIC_URL + \"/icons/location.png\"} />\n          </button>\n        </div>\n\n        <div id=\"weatherWrapper\" className=\"hidden\">\n          <div className=\"current-wrapper\">{current}</div>\n          <div className=\"cards-wrapper\">\n            {day1}\n            {day2}\n            {day3}\n            {day4}\n            {day5}\n            {day6}\n          </div>\n          <div id=\"hourly-wrapper\"></div>\n        </div>\n\n        <div id=\"myModal\" className=\"modal\">\n          <div className=\"modal-content\" id=\"modalContent\">\n            <span className=\"close\" id=\"close\">\n              &times;\n            </span>\n            <p id=\"modal-header\"></p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\nfunction parseDate(dateString) {\n  //parsing the date string\n  var date = dateString;\n  let month = date.slice(5, 7);\n  let day = date.slice(8, 10);\n  month = month.replace(\"0\", \"\");\n  let hour = date.slice(11, 16);\n  return day + \".\" + month;\n}\n\nfunction getDayName(dateString, locale) {\n  //get the day name\n  var date = new Date(dateString);\n  return date.toLocaleDateString(locale, { weekday: \"long\" });\n}\n\nfunction cardClicked(data) {\n  // Display a modal when a card is clicked\n  var i = 1;\n  for (i = 1; i < data.allData.length; i++) {\n    // Create the html blocks according to data length\n    let div = document.createElement(\"div\");\n    div.classList.add(\"hourly-div\");\n\n    let headerDate = parseDate(data.allData[i].dateAndTime); //Modal header\n    let dateName = getDayName(data.allData[i].dateAndTime, \"en\", \"EN\");\n    document.getElementById(\"modal-header\").innerHTML =\n      dateName + \" \" + headerDate;\n\n    let image = document.createElement(\"img\"); //image\n    image.src = \"/icons/\" + data.allData[i].icon + \".png\";\n\n    let time = document.createElement(\"p\"); //time\n    let parsedTime = data.allData[i].dateAndTime.slice(11, 16);\n    time.innerHTML = parsedTime;\n\n    let temp = document.createElement(\"p\"); //temp\n    if (Math.round(data.allData[i].temp_max) >= 0) {\n      temp.innerHTML = \"+\" + Math.round(data.allData[i].temp_max) + \"°\";\n    } else {\n      temp.innerHTML = \"-\" + Math.round(data.allData[i].temp_max) + \"°\";\n    }\n\n    let windContainer = document.createElement(\"div\"); //wind\n    windContainer.classList.add(\"wind-container\");\n    let wind = document.createElement(\"img\");\n    let windSpeed = document.createElement(\"div\");\n    windSpeed.classList.add(\"wind-speed\");\n    windSpeed.innerHTML = Math.round(data.allData[i].wind_speed);\n    wind.classList.add(\"wind\");\n    wind.src = \"/icons/wind.png\";\n    wind.style.cssText =\n      \"transform: rotate(\" +\n      data.allData[i].wind_deg +\n      \"deg); transition-property: transform; transition-duration: 3s;\";\n    windContainer.appendChild(wind);\n    windContainer.appendChild(windSpeed);\n\n    //append the html to div and then the div to the modal\n\n    div.appendChild(time);\n    div.appendChild(image);\n    div.appendChild(temp);\n    div.appendChild(windContainer);\n    modalContent.appendChild(div);\n    modal.style.display = \"flex\";\n  }\n}\n\n// Get the modal\nvar modal = document.getElementById(\"myModal\");\n\n// Get the modal content div\nvar modalContent = document.getElementById(\"modalContent\");\n\n// Get the button that opens the modal\nvar card = document.getElementsByClassName(\"card\");\n\n// Add event listener to document and delegate it to the dynamically added <span> tag\ndocument.addEventListener(\"click\", function (e) {\n  if (e.target && e.target.id == \"close\") {\n    spanClicked();\n  }\n});\n\n// When the user clicks on the button, open the modal\ncard.onclick = function () {\n  modal.style.display = \"block\";\n};\n\n// When the user clicks on <span> (x), close the modal\nfunction spanClicked() {\n  modal.style.display = \"none\";\n  modalContent.innerHTML = \" \"; //get rid of the content\n  //create <p> and <span> again and add them to the modal\n  let header = document.createElement(\"p\");\n  header.setAttribute(\"id\", \"modal-header\");\n  let exitButton = document.createElement(\"span\");\n  exitButton.classList.add(\"close\");\n  exitButton.innerHTML = \"&times;\";\n  exitButton.setAttribute(\"id\", \"close\");\n  modalContent.appendChild(exitButton);\n  modalContent.appendChild(header);\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function (event) {\n  if (event.target == modal) {\n    modal.style.display = \"none\";\n    modalContent.innerHTML = \" \"; //get rid of the content\n    //create <p> and <span> again and add them to the modal\n    let header = document.createElement(\"p\");\n    header.setAttribute(\"id\", \"modal-header\");\n    let exitButton = document.createElement(\"span\");\n    exitButton.classList.add(\"close\");\n    exitButton.innerHTML = \"&times;\";\n    exitButton.setAttribute(\"id\", \"close\");\n    modalContent.appendChild(exitButton);\n    modalContent.appendChild(header);\n  }\n};\n"],"sourceRoot":""}